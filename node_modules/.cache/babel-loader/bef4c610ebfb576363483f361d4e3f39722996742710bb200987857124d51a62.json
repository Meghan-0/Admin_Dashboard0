{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\MEGHAN\\\\Admin\\\\src\\\\contexts\\\\AuthContext.tsx\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useContext, useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(undefined);\nexport const useAuth = () => {\n  _s();\n  const context = useContext(AuthContext);\n  if (context === undefined) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(true);\n  useEffect(() => {\n    // Check for stored authentication on app load\n    const storedUser = localStorage.getItem('sportify_admin_user');\n    if (storedUser) {\n      try {\n        setUser(JSON.parse(storedUser));\n      } catch (error) {\n        localStorage.removeItem('sportify_admin_user');\n      }\n    }\n    setLoading(false);\n  }, []);\n  const login = async (email, password) => {\n    setLoading(true);\n\n    // Simulate API call\n    await new Promise(resolve => setTimeout(resolve, 1000));\n\n    // Mock authentication - in real app, this would be an API call\n    if (email === 'admin@sportify.com' && password === 'admin123') {\n      const mockUser = {\n        id: '1',\n        email: 'admin@sportify.com',\n        name: 'Admin User',\n        role: 'admin'\n      };\n      setUser(mockUser);\n      localStorage.setItem('sportify_admin_user', JSON.stringify(mockUser));\n      setLoading(false);\n      return true;\n    }\n    setLoading(false);\n    return false;\n  };\n  const logout = () => {\n    setUser(null);\n    localStorage.removeItem('sportify_admin_user');\n  };\n  const value = {\n    user,\n    isAuthenticated: !!user,\n    login,\n    logout,\n    loading\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 5\n  }, this);\n};\n_s2(AuthProvider, \"NiO5z6JIqzX62LS5UWDgIqbZYyY=\");\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsxDEV","_jsxDEV","AuthContext","undefined","useAuth","_s","context","Error","AuthProvider","children","_s2","user","setUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","error","removeItem","login","email","password","Promise","resolve","setTimeout","mockUser","id","name","role","setItem","stringify","logout","value","isAuthenticated","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/MEGHAN/Admin/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User } from '../types';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  loading: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored authentication on app load\r\n    const storedUser = localStorage.getItem('sportify_admin_user');\r\n    if (storedUser) {\r\n      try {\r\n        setUser(JSON.parse(storedUser));\r\n      } catch (error) {\r\n        localStorage.removeItem('sportify_admin_user');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string): Promise<boolean> => {\r\n    setLoading(true);\r\n    \r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Mock authentication - in real app, this would be an API call\r\n    if (email === 'admin@sportify.com' && password === 'admin123') {\r\n      const mockUser: User = {\r\n        id: '1',\r\n        email: 'admin@sportify.com',\r\n        name: 'Admin User',\r\n        role: 'admin'\r\n      };\r\n      \r\n      setUser(mockUser);\r\n      localStorage.setItem('sportify_admin_user', JSON.stringify(mockUser));\r\n      setLoading(false);\r\n      return true;\r\n    }\r\n    \r\n    setLoading(false);\r\n    return false;\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('sportify_admin_user');\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    login,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,UAAU,EAAEC,QAAQ,EAAEC,SAAS,QAAmB,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAWzF,MAAMC,WAAW,gBAAGN,aAAa,CAA8BO,SAAS,CAAC;AAEzE,OAAO,MAAMC,OAAO,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAC3B,MAAMC,OAAO,GAAGT,UAAU,CAACK,WAAW,CAAC;EACvC,IAAII,OAAO,KAAKH,SAAS,EAAE;IACzB,MAAM,IAAII,KAAK,CAAC,6CAA6C,CAAC;EAChE;EACA,OAAOD,OAAO;AAChB,CAAC;AAACD,EAAA,CANWD,OAAO;AAYpB,OAAO,MAAMI,YAAyC,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,GAAA;EACzE,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAc,IAAI,CAAC;EACnD,MAAM,CAACe,OAAO,EAAEC,UAAU,CAAC,GAAGhB,QAAQ,CAAC,IAAI,CAAC;EAE5CC,SAAS,CAAC,MAAM;IACd;IACA,MAAMgB,UAAU,GAAGC,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC;IAC9D,IAAIF,UAAU,EAAE;MACd,IAAI;QACFH,OAAO,CAACM,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC;MACjC,CAAC,CAAC,OAAOK,KAAK,EAAE;QACdJ,YAAY,CAACK,UAAU,CAAC,qBAAqB,CAAC;MAChD;IACF;IACAP,UAAU,CAAC,KAAK,CAAC;EACnB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMQ,KAAK,GAAG,MAAAA,CAAOC,KAAa,EAAEC,QAAgB,KAAuB;IACzEV,UAAU,CAAC,IAAI,CAAC;;IAEhB;IACA,MAAM,IAAIW,OAAO,CAACC,OAAO,IAAIC,UAAU,CAACD,OAAO,EAAE,IAAI,CAAC,CAAC;;IAEvD;IACA,IAAIH,KAAK,KAAK,oBAAoB,IAAIC,QAAQ,KAAK,UAAU,EAAE;MAC7D,MAAMI,QAAc,GAAG;QACrBC,EAAE,EAAE,GAAG;QACPN,KAAK,EAAE,oBAAoB;QAC3BO,IAAI,EAAE,YAAY;QAClBC,IAAI,EAAE;MACR,CAAC;MAEDnB,OAAO,CAACgB,QAAQ,CAAC;MACjBZ,YAAY,CAACgB,OAAO,CAAC,qBAAqB,EAAEd,IAAI,CAACe,SAAS,CAACL,QAAQ,CAAC,CAAC;MACrEd,UAAU,CAAC,KAAK,CAAC;MACjB,OAAO,IAAI;IACb;IAEAA,UAAU,CAAC,KAAK,CAAC;IACjB,OAAO,KAAK;EACd,CAAC;EAED,MAAMoB,MAAM,GAAGA,CAAA,KAAM;IACnBtB,OAAO,CAAC,IAAI,CAAC;IACbI,YAAY,CAACK,UAAU,CAAC,qBAAqB,CAAC;EAChD,CAAC;EAED,MAAMc,KAAsB,GAAG;IAC7BxB,IAAI;IACJyB,eAAe,EAAE,CAAC,CAACzB,IAAI;IACvBW,KAAK;IACLY,MAAM;IACNrB;EACF,CAAC;EAED,oBACEZ,OAAA,CAACC,WAAW,CAACmC,QAAQ;IAACF,KAAK,EAAEA,KAAM;IAAA1B,QAAA,EAChCA;EAAQ;IAAA6B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAAC/B,GAAA,CA5DWF,YAAyC;AAAAkC,EAAA,GAAzClC,YAAyC;AAAA,IAAAkC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}