{"ast":null,"code":"export const mockAthletes = [{\n  id: '1',\n  sportifyId: 'SP001',\n  name: 'Alex Johnson',\n  age: 22,\n  gender: 'male',\n  region: 'North America',\n  email: 'alex.johnson@email.com',\n  phone: '+1-555-0123',\n  performance: {\n    averageScore: 87.5,\n    totalTests: 15,\n    bestScore: 95.2,\n    lastTestDate: '2024-01-15'\n  },\n  badges: [{\n    id: '1',\n    name: 'Speed Demon',\n    description: 'Achieved top 10% in speed tests',\n    icon: '⚡',\n    color: '#FFD700',\n    criteria: {\n      type: 'score',\n      value: 90,\n      description: 'Score above 90'\n    },\n    earnedAt: '2024-01-10'\n  }, {\n    id: '2',\n    name: 'Consistent Performer',\n    description: 'Completed 10+ tests',\n    icon: '🎯',\n    color: '#4CAF50',\n    criteria: {\n      type: 'participation',\n      value: 10,\n      description: 'Complete 10 tests'\n    },\n    earnedAt: '2024-01-05'\n  }],\n  eligibility: {\n    isEligible: true,\n    verified: true,\n    verificationDate: '2024-01-01'\n  },\n  createdAt: '2023-12-01',\n  lastActive: '2024-01-15'\n}, {\n  id: '2',\n  sportifyId: 'SP002',\n  name: 'Sarah Chen',\n  age: 20,\n  gender: 'female',\n  region: 'Asia Pacific',\n  email: 'sarah.chen@email.com',\n  phone: '+86-138-0013-8000',\n  performance: {\n    averageScore: 92.3,\n    totalTests: 12,\n    bestScore: 98.1,\n    lastTestDate: '2024-01-14'\n  },\n  badges: [{\n    id: '3',\n    name: 'Elite Athlete',\n    description: 'Consistently scores above 90',\n    icon: '🏆',\n    color: '#FF6B6B',\n    criteria: {\n      type: 'score',\n      value: 90,\n      description: 'Average score above 90'\n    },\n    earnedAt: '2024-01-12'\n  }],\n  eligibility: {\n    isEligible: true,\n    verified: true,\n    verificationDate: '2023-12-15'\n  },\n  createdAt: '2023-11-20',\n  lastActive: '2024-01-14'\n}, {\n  id: '3',\n  sportifyId: 'SP003',\n  name: 'Marcus Williams',\n  age: 25,\n  gender: 'male',\n  region: 'Europe',\n  email: 'marcus.williams@email.com',\n  phone: '+44-20-7946-0958',\n  performance: {\n    averageScore: 78.9,\n    totalTests: 8,\n    bestScore: 85.4,\n    lastTestDate: '2024-01-10'\n  },\n  badges: [],\n  eligibility: {\n    isEligible: true,\n    verified: false\n  },\n  createdAt: '2023-12-10',\n  lastActive: '2024-01-10'\n}];\nexport const mockEvents = [{\n  id: '1',\n  name: 'Winter Championship 2024',\n  description: 'Annual winter sports championship featuring speed and endurance tests',\n  date: '2024-02-15',\n  venue: {\n    type: 'offline',\n    location: 'Olympic Sports Complex, Denver'\n  },\n  eligibilityRules: {\n    minAge: 18,\n    maxAge: 30,\n    genders: ['male', 'female'],\n    regions: ['North America', 'Europe', 'Asia Pacific']\n  },\n  requiredTests: ['Speed Test', 'Endurance Test', 'Agility Test'],\n  registeredAthletes: ['1', '2'],\n  status: 'upcoming',\n  createdAt: '2024-01-01'\n}, {\n  id: '2',\n  name: 'Virtual Sprint Challenge',\n  description: 'Online sprint challenge for athletes worldwide',\n  date: '2024-01-25',\n  venue: {\n    type: 'online',\n    location: 'Virtual Platform'\n  },\n  eligibilityRules: {\n    minAge: 16,\n    maxAge: 35,\n    genders: ['male', 'female', 'other'],\n    regions: ['North America', 'Europe', 'Asia Pacific', 'South America', 'Africa']\n  },\n  requiredTests: ['Sprint Test', 'Reaction Time Test'],\n  registeredAthletes: ['1', '2', '3'],\n  status: 'upcoming',\n  createdAt: '2024-01-05'\n}];\nexport const mockTestResults = [{\n  id: '1',\n  athleteId: '1',\n  eventId: '1',\n  testType: 'Speed Test',\n  score: 95.2,\n  maxScore: 100,\n  metrics: {\n    '100m_time': 10.8,\n    'reaction_time': 0.12,\n    'acceleration': 8.5\n  },\n  videoUrl: 'https://example.com/video1.mp4',\n  images: ['https://example.com/image1.jpg'],\n  submittedAt: '2024-01-15T10:30:00Z',\n  verified: true,\n  flagged: false,\n  verifiedBy: 'admin',\n  verifiedAt: '2024-01-15T11:00:00Z'\n}, {\n  id: '2',\n  athleteId: '2',\n  eventId: '1',\n  testType: 'Speed Test',\n  score: 98.1,\n  maxScore: 100,\n  metrics: {\n    '100m_time': 10.2,\n    'reaction_time': 0.10,\n    'acceleration': 9.1\n  },\n  videoUrl: 'https://example.com/video2.mp4',\n  images: ['https://example.com/image2.jpg'],\n  submittedAt: '2024-01-14T14:20:00Z',\n  verified: true,\n  flagged: false,\n  verifiedBy: 'admin',\n  verifiedAt: '2024-01-14T15:00:00Z'\n}, {\n  id: '3',\n  athleteId: '3',\n  eventId: '2',\n  testType: 'Sprint Test',\n  score: 72.3,\n  maxScore: 100,\n  metrics: {\n    '50m_time': 6.8,\n    'reaction_time': 0.18,\n    'acceleration': 6.2\n  },\n  videoUrl: 'https://example.com/video3.mp4',\n  images: ['https://example.com/image3.jpg'],\n  submittedAt: '2024-01-10T09:15:00Z',\n  verified: false,\n  flagged: true,\n  flagReason: 'Suspicious acceleration pattern detected',\n  verifiedBy: undefined,\n  verifiedAt: undefined\n}];\nexport const mockBadges = [{\n  id: '1',\n  name: 'Speed Demon',\n  description: 'Achieved top 10% in speed tests',\n  icon: '⚡',\n  color: '#FFD700',\n  criteria: {\n    type: 'score',\n    value: 90,\n    description: 'Score above 90 in speed tests'\n  }\n}, {\n  id: '2',\n  name: 'Consistent Performer',\n  description: 'Completed 10+ tests',\n  icon: '🎯',\n  color: '#4CAF50',\n  criteria: {\n    type: 'participation',\n    value: 10,\n    description: 'Complete 10 tests'\n  }\n}, {\n  id: '3',\n  name: 'Elite Athlete',\n  description: 'Consistently scores above 90',\n  icon: '🏆',\n  color: '#FF6B6B',\n  criteria: {\n    type: 'score',\n    value: 90,\n    description: 'Average score above 90'\n  }\n}, {\n  id: '4',\n  name: 'Streak Master',\n  description: 'Maintained 7-day test streak',\n  icon: '🔥',\n  color: '#FF5722',\n  criteria: {\n    type: 'streak',\n    value: 7,\n    description: 'Complete tests for 7 consecutive days'\n  }\n}];\nexport const getDashboardStats = () => ({\n  totalAthletes: mockAthletes.length,\n  upcomingEvents: mockEvents.filter(e => e.status === 'upcoming').length,\n  completedTests: mockTestResults.filter(t => t.verified).length,\n  averagePerformance: mockAthletes.reduce((sum, a) => sum + a.performance.averageScore, 0) / mockAthletes.length,\n  recentReports: mockTestResults.filter(t => {\n    const submittedDate = new Date(t.submittedAt);\n    const weekAgo = new Date();\n    weekAgo.setDate(weekAgo.getDate() - 7);\n    return submittedDate > weekAgo;\n  }).length,\n  pendingVerifications: mockTestResults.filter(t => !t.verified && !t.flagged).length,\n  flaggedAttempts: mockTestResults.filter(t => t.flagged).length\n});\nexport const getPerformanceChartData = () => [{\n  name: 'Speed',\n  value: 85,\n  color: '#FF6B6B'\n}, {\n  name: 'Endurance',\n  value: 78,\n  color: '#4ECDC4'\n}, {\n  name: 'Agility',\n  value: 92,\n  color: '#45B7D1'\n}, {\n  name: 'Strength',\n  value: 88,\n  color: '#96CEB4'\n}, {\n  name: 'Flexibility',\n  value: 75,\n  color: '#FFEAA7'\n}];\nexport const getLeaderboardData = () => {\n  return mockAthletes.map(athlete => ({\n    rank: 0,\n    // Will be set after sorting\n    athleteId: athlete.id,\n    athleteName: athlete.name,\n    score: athlete.performance.averageScore,\n    badges: athlete.badges.length,\n    region: athlete.region\n  })).sort((a, b) => b.score - a.score).map((entry, index) => ({\n    ...entry,\n    rank: index + 1\n  }));\n};","map":{"version":3,"names":["mockAthletes","id","sportifyId","name","age","gender","region","email","phone","performance","averageScore","totalTests","bestScore","lastTestDate","badges","description","icon","color","criteria","type","value","earnedAt","eligibility","isEligible","verified","verificationDate","createdAt","lastActive","mockEvents","date","venue","location","eligibilityRules","minAge","maxAge","genders","regions","requiredTests","registeredAthletes","status","mockTestResults","athleteId","eventId","testType","score","maxScore","metrics","videoUrl","images","submittedAt","flagged","verifiedBy","verifiedAt","flagReason","undefined","mockBadges","getDashboardStats","totalAthletes","length","upcomingEvents","filter","e","completedTests","t","averagePerformance","reduce","sum","a","recentReports","submittedDate","Date","weekAgo","setDate","getDate","pendingVerifications","flaggedAttempts","getPerformanceChartData","getLeaderboardData","map","athlete","rank","athleteName","sort","b","entry","index"],"sources":["C:/Users/MEGHAN/Admin/src/services/mockData.ts"],"sourcesContent":["import { Athlete, Event, TestResult, Badge, DashboardStats, PerformanceChartData, LeaderboardEntry } from '../types';\r\n\r\nexport const mockAthletes: Athlete[] = [\r\n  {\r\n    id: '1',\r\n    sportifyId: 'SP001',\r\n    name: 'Alex Johnson',\r\n    age: 22,\r\n    gender: 'male',\r\n    region: 'North America',\r\n    email: 'alex.johnson@email.com',\r\n    phone: '+1-555-0123',\r\n    performance: {\r\n      averageScore: 87.5,\r\n      totalTests: 15,\r\n      bestScore: 95.2,\r\n      lastTestDate: '2024-01-15'\r\n    },\r\n    badges: [\r\n      { id: '1', name: 'Speed Demon', description: 'Achieved top 10% in speed tests', icon: '⚡', color: '#FFD700', criteria: { type: 'score', value: 90, description: 'Score above 90' }, earnedAt: '2024-01-10' },\r\n      { id: '2', name: 'Consistent Performer', description: 'Completed 10+ tests', icon: '🎯', color: '#4CAF50', criteria: { type: 'participation', value: 10, description: 'Complete 10 tests' }, earnedAt: '2024-01-05' }\r\n    ],\r\n    eligibility: {\r\n      isEligible: true,\r\n      verified: true,\r\n      verificationDate: '2024-01-01'\r\n    },\r\n    createdAt: '2023-12-01',\r\n    lastActive: '2024-01-15'\r\n  },\r\n  {\r\n    id: '2',\r\n    sportifyId: 'SP002',\r\n    name: 'Sarah Chen',\r\n    age: 20,\r\n    gender: 'female',\r\n    region: 'Asia Pacific',\r\n    email: 'sarah.chen@email.com',\r\n    phone: '+86-138-0013-8000',\r\n    performance: {\r\n      averageScore: 92.3,\r\n      totalTests: 12,\r\n      bestScore: 98.1,\r\n      lastTestDate: '2024-01-14'\r\n    },\r\n    badges: [\r\n      { id: '3', name: 'Elite Athlete', description: 'Consistently scores above 90', icon: '🏆', color: '#FF6B6B', criteria: { type: 'score', value: 90, description: 'Average score above 90' }, earnedAt: '2024-01-12' }\r\n    ],\r\n    eligibility: {\r\n      isEligible: true,\r\n      verified: true,\r\n      verificationDate: '2023-12-15'\r\n    },\r\n    createdAt: '2023-11-20',\r\n    lastActive: '2024-01-14'\r\n  },\r\n  {\r\n    id: '3',\r\n    sportifyId: 'SP003',\r\n    name: 'Marcus Williams',\r\n    age: 25,\r\n    gender: 'male',\r\n    region: 'Europe',\r\n    email: 'marcus.williams@email.com',\r\n    phone: '+44-20-7946-0958',\r\n    performance: {\r\n      averageScore: 78.9,\r\n      totalTests: 8,\r\n      bestScore: 85.4,\r\n      lastTestDate: '2024-01-10'\r\n    },\r\n    badges: [],\r\n    eligibility: {\r\n      isEligible: true,\r\n      verified: false\r\n    },\r\n    createdAt: '2023-12-10',\r\n    lastActive: '2024-01-10'\r\n  }\r\n];\r\n\r\nexport const mockEvents: Event[] = [\r\n  {\r\n    id: '1',\r\n    name: 'Winter Championship 2024',\r\n    description: 'Annual winter sports championship featuring speed and endurance tests',\r\n    date: '2024-02-15',\r\n    venue: {\r\n      type: 'offline',\r\n      location: 'Olympic Sports Complex, Denver'\r\n    },\r\n    eligibilityRules: {\r\n      minAge: 18,\r\n      maxAge: 30,\r\n      genders: ['male', 'female'],\r\n      regions: ['North America', 'Europe', 'Asia Pacific']\r\n    },\r\n    requiredTests: ['Speed Test', 'Endurance Test', 'Agility Test'],\r\n    registeredAthletes: ['1', '2'],\r\n    status: 'upcoming',\r\n    createdAt: '2024-01-01'\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Virtual Sprint Challenge',\r\n    description: 'Online sprint challenge for athletes worldwide',\r\n    date: '2024-01-25',\r\n    venue: {\r\n      type: 'online',\r\n      location: 'Virtual Platform'\r\n    },\r\n    eligibilityRules: {\r\n      minAge: 16,\r\n      maxAge: 35,\r\n      genders: ['male', 'female', 'other'],\r\n      regions: ['North America', 'Europe', 'Asia Pacific', 'South America', 'Africa']\r\n    },\r\n    requiredTests: ['Sprint Test', 'Reaction Time Test'],\r\n    registeredAthletes: ['1', '2', '3'],\r\n    status: 'upcoming',\r\n    createdAt: '2024-01-05'\r\n  }\r\n];\r\n\r\nexport const mockTestResults: TestResult[] = [\r\n  {\r\n    id: '1',\r\n    athleteId: '1',\r\n    eventId: '1',\r\n    testType: 'Speed Test',\r\n    score: 95.2,\r\n    maxScore: 100,\r\n    metrics: {\r\n      '100m_time': 10.8,\r\n      'reaction_time': 0.12,\r\n      'acceleration': 8.5\r\n    },\r\n    videoUrl: 'https://example.com/video1.mp4',\r\n    images: ['https://example.com/image1.jpg'],\r\n    submittedAt: '2024-01-15T10:30:00Z',\r\n    verified: true,\r\n    flagged: false,\r\n    verifiedBy: 'admin',\r\n    verifiedAt: '2024-01-15T11:00:00Z'\r\n  },\r\n  {\r\n    id: '2',\r\n    athleteId: '2',\r\n    eventId: '1',\r\n    testType: 'Speed Test',\r\n    score: 98.1,\r\n    maxScore: 100,\r\n    metrics: {\r\n      '100m_time': 10.2,\r\n      'reaction_time': 0.10,\r\n      'acceleration': 9.1\r\n    },\r\n    videoUrl: 'https://example.com/video2.mp4',\r\n    images: ['https://example.com/image2.jpg'],\r\n    submittedAt: '2024-01-14T14:20:00Z',\r\n    verified: true,\r\n    flagged: false,\r\n    verifiedBy: 'admin',\r\n    verifiedAt: '2024-01-14T15:00:00Z'\r\n  },\r\n  {\r\n    id: '3',\r\n    athleteId: '3',\r\n    eventId: '2',\r\n    testType: 'Sprint Test',\r\n    score: 72.3,\r\n    maxScore: 100,\r\n    metrics: {\r\n      '50m_time': 6.8,\r\n      'reaction_time': 0.18,\r\n      'acceleration': 6.2\r\n    },\r\n    videoUrl: 'https://example.com/video3.mp4',\r\n    images: ['https://example.com/image3.jpg'],\r\n    submittedAt: '2024-01-10T09:15:00Z',\r\n    verified: false,\r\n    flagged: true,\r\n    flagReason: 'Suspicious acceleration pattern detected',\r\n    verifiedBy: undefined,\r\n    verifiedAt: undefined\r\n  }\r\n];\r\n\r\nexport const mockBadges: Badge[] = [\r\n  {\r\n    id: '1',\r\n    name: 'Speed Demon',\r\n    description: 'Achieved top 10% in speed tests',\r\n    icon: '⚡',\r\n    color: '#FFD700',\r\n    criteria: {\r\n      type: 'score',\r\n      value: 90,\r\n      description: 'Score above 90 in speed tests'\r\n    }\r\n  },\r\n  {\r\n    id: '2',\r\n    name: 'Consistent Performer',\r\n    description: 'Completed 10+ tests',\r\n    icon: '🎯',\r\n    color: '#4CAF50',\r\n    criteria: {\r\n      type: 'participation',\r\n      value: 10,\r\n      description: 'Complete 10 tests'\r\n    }\r\n  },\r\n  {\r\n    id: '3',\r\n    name: 'Elite Athlete',\r\n    description: 'Consistently scores above 90',\r\n    icon: '🏆',\r\n    color: '#FF6B6B',\r\n    criteria: {\r\n      type: 'score',\r\n      value: 90,\r\n      description: 'Average score above 90'\r\n    }\r\n  },\r\n  {\r\n    id: '4',\r\n    name: 'Streak Master',\r\n    description: 'Maintained 7-day test streak',\r\n    icon: '🔥',\r\n    color: '#FF5722',\r\n    criteria: {\r\n      type: 'streak',\r\n      value: 7,\r\n      description: 'Complete tests for 7 consecutive days'\r\n    }\r\n  }\r\n];\r\n\r\nexport const getDashboardStats = (): DashboardStats => ({\r\n  totalAthletes: mockAthletes.length,\r\n  upcomingEvents: mockEvents.filter(e => e.status === 'upcoming').length,\r\n  completedTests: mockTestResults.filter(t => t.verified).length,\r\n  averagePerformance: mockAthletes.reduce((sum, a) => sum + a.performance.averageScore, 0) / mockAthletes.length,\r\n  recentReports: mockTestResults.filter(t => {\r\n    const submittedDate = new Date(t.submittedAt);\r\n    const weekAgo = new Date();\r\n    weekAgo.setDate(weekAgo.getDate() - 7);\r\n    return submittedDate > weekAgo;\r\n  }).length,\r\n  pendingVerifications: mockTestResults.filter(t => !t.verified && !t.flagged).length,\r\n  flaggedAttempts: mockTestResults.filter(t => t.flagged).length\r\n});\r\n\r\nexport const getPerformanceChartData = (): PerformanceChartData[] => [\r\n  { name: 'Speed', value: 85, color: '#FF6B6B' },\r\n  { name: 'Endurance', value: 78, color: '#4ECDC4' },\r\n  { name: 'Agility', value: 92, color: '#45B7D1' },\r\n  { name: 'Strength', value: 88, color: '#96CEB4' },\r\n  { name: 'Flexibility', value: 75, color: '#FFEAA7' }\r\n];\r\n\r\nexport const getLeaderboardData = (): LeaderboardEntry[] => {\r\n  return mockAthletes\r\n    .map(athlete => ({\r\n      rank: 0, // Will be set after sorting\r\n      athleteId: athlete.id,\r\n      athleteName: athlete.name,\r\n      score: athlete.performance.averageScore,\r\n      badges: athlete.badges.length,\r\n      region: athlete.region\r\n    }))\r\n    .sort((a, b) => b.score - a.score)\r\n    .map((entry, index) => ({ ...entry, rank: index + 1 }));\r\n};\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}