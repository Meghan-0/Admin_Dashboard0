{"ast":null,"code":"import React,{createContext,useContext,useState,useEffect}from'react';import{jsx as _jsx}from\"react/jsx-runtime\";const AuthContext=/*#__PURE__*/createContext(undefined);export const useAuth=()=>{const context=useContext(AuthContext);if(context===undefined){throw new Error('useAuth must be used within an AuthProvider');}return context;};export const AuthProvider=_ref=>{let{children}=_ref;const[user,setUser]=useState(null);const[loading,setLoading]=useState(true);useEffect(()=>{// Check for stored authentication on app load\nconst storedUser=localStorage.getItem('sportify_admin_user');if(storedUser){try{setUser(JSON.parse(storedUser));}catch(error){localStorage.removeItem('sportify_admin_user');}}setLoading(false);},[]);const login=async(email,password)=>{setLoading(true);// Simulate API call\nawait new Promise(resolve=>setTimeout(resolve,1000));// Mock authentication - in real app, this would be an API call\nif(email==='admin@sportify.com'&&password==='admin123'){const mockUser={id:'1',email:'admin@sportify.com',name:'Admin User',role:'admin'};setUser(mockUser);localStorage.setItem('sportify_admin_user',JSON.stringify(mockUser));setLoading(false);return true;}setLoading(false);return false;};const logout=()=>{setUser(null);localStorage.removeItem('sportify_admin_user');};const value={user,isAuthenticated:!!user,login,logout,loading};return/*#__PURE__*/_jsx(AuthContext.Provider,{value:value,children:children});};","map":{"version":3,"names":["React","createContext","useContext","useState","useEffect","jsx","_jsx","AuthContext","undefined","useAuth","context","Error","AuthProvider","_ref","children","user","setUser","loading","setLoading","storedUser","localStorage","getItem","JSON","parse","error","removeItem","login","email","password","Promise","resolve","setTimeout","mockUser","id","name","role","setItem","stringify","logout","value","isAuthenticated","Provider"],"sources":["C:/Users/MEGHAN/Admin/src/contexts/AuthContext.tsx"],"sourcesContent":["import React, { createContext, useContext, useState, useEffect, ReactNode } from 'react';\r\nimport { User } from '../types';\r\n\r\ninterface AuthContextType {\r\n  user: User | null;\r\n  isAuthenticated: boolean;\r\n  login: (email: string, password: string) => Promise<boolean>;\r\n  logout: () => void;\r\n  loading: boolean;\r\n}\r\n\r\nconst AuthContext = createContext<AuthContextType | undefined>(undefined);\r\n\r\nexport const useAuth = () => {\r\n  const context = useContext(AuthContext);\r\n  if (context === undefined) {\r\n    throw new Error('useAuth must be used within an AuthProvider');\r\n  }\r\n  return context;\r\n};\r\n\r\ninterface AuthProviderProps {\r\n  children: ReactNode;\r\n}\r\n\r\nexport const AuthProvider: React.FC<AuthProviderProps> = ({ children }) => {\r\n  const [user, setUser] = useState<User | null>(null);\r\n  const [loading, setLoading] = useState(true);\r\n\r\n  useEffect(() => {\r\n    // Check for stored authentication on app load\r\n    const storedUser = localStorage.getItem('sportify_admin_user');\r\n    if (storedUser) {\r\n      try {\r\n        setUser(JSON.parse(storedUser));\r\n      } catch (error) {\r\n        localStorage.removeItem('sportify_admin_user');\r\n      }\r\n    }\r\n    setLoading(false);\r\n  }, []);\r\n\r\n  const login = async (email: string, password: string): Promise<boolean> => {\r\n    setLoading(true);\r\n    \r\n    // Simulate API call\r\n    await new Promise(resolve => setTimeout(resolve, 1000));\r\n    \r\n    // Mock authentication - in real app, this would be an API call\r\n    if (email === 'admin@sportify.com' && password === 'admin123') {\r\n      const mockUser: User = {\r\n        id: '1',\r\n        email: 'admin@sportify.com',\r\n        name: 'Admin User',\r\n        role: 'admin'\r\n      };\r\n      \r\n      setUser(mockUser);\r\n      localStorage.setItem('sportify_admin_user', JSON.stringify(mockUser));\r\n      setLoading(false);\r\n      return true;\r\n    }\r\n    \r\n    setLoading(false);\r\n    return false;\r\n  };\r\n\r\n  const logout = () => {\r\n    setUser(null);\r\n    localStorage.removeItem('sportify_admin_user');\r\n  };\r\n\r\n  const value: AuthContextType = {\r\n    user,\r\n    isAuthenticated: !!user,\r\n    login,\r\n    logout,\r\n    loading\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={value}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,aAAa,CAAEC,UAAU,CAAEC,QAAQ,CAAEC,SAAS,KAAmB,OAAO,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAWzF,KAAM,CAAAC,WAAW,cAAGN,aAAa,CAA8BO,SAAS,CAAC,CAEzE,MAAO,MAAM,CAAAC,OAAO,CAAGA,CAAA,GAAM,CAC3B,KAAM,CAAAC,OAAO,CAAGR,UAAU,CAACK,WAAW,CAAC,CACvC,GAAIG,OAAO,GAAKF,SAAS,CAAE,CACzB,KAAM,IAAI,CAAAG,KAAK,CAAC,6CAA6C,CAAC,CAChE,CACA,MAAO,CAAAD,OAAO,CAChB,CAAC,CAMD,MAAO,MAAM,CAAAE,YAAyC,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CACpE,KAAM,CAACE,IAAI,CAAEC,OAAO,CAAC,CAAGb,QAAQ,CAAc,IAAI,CAAC,CACnD,KAAM,CAACc,OAAO,CAAEC,UAAU,CAAC,CAAGf,QAAQ,CAAC,IAAI,CAAC,CAE5CC,SAAS,CAAC,IAAM,CACd;AACA,KAAM,CAAAe,UAAU,CAAGC,YAAY,CAACC,OAAO,CAAC,qBAAqB,CAAC,CAC9D,GAAIF,UAAU,CAAE,CACd,GAAI,CACFH,OAAO,CAACM,IAAI,CAACC,KAAK,CAACJ,UAAU,CAAC,CAAC,CACjC,CAAE,MAAOK,KAAK,CAAE,CACdJ,YAAY,CAACK,UAAU,CAAC,qBAAqB,CAAC,CAChD,CACF,CACAP,UAAU,CAAC,KAAK,CAAC,CACnB,CAAC,CAAE,EAAE,CAAC,CAEN,KAAM,CAAAQ,KAAK,CAAG,KAAAA,CAAOC,KAAa,CAAEC,QAAgB,GAAuB,CACzEV,UAAU,CAAC,IAAI,CAAC,CAEhB;AACA,KAAM,IAAI,CAAAW,OAAO,CAACC,OAAO,EAAIC,UAAU,CAACD,OAAO,CAAE,IAAI,CAAC,CAAC,CAEvD;AACA,GAAIH,KAAK,GAAK,oBAAoB,EAAIC,QAAQ,GAAK,UAAU,CAAE,CAC7D,KAAM,CAAAI,QAAc,CAAG,CACrBC,EAAE,CAAE,GAAG,CACPN,KAAK,CAAE,oBAAoB,CAC3BO,IAAI,CAAE,YAAY,CAClBC,IAAI,CAAE,OACR,CAAC,CAEDnB,OAAO,CAACgB,QAAQ,CAAC,CACjBZ,YAAY,CAACgB,OAAO,CAAC,qBAAqB,CAAEd,IAAI,CAACe,SAAS,CAACL,QAAQ,CAAC,CAAC,CACrEd,UAAU,CAAC,KAAK,CAAC,CACjB,MAAO,KAAI,CACb,CAEAA,UAAU,CAAC,KAAK,CAAC,CACjB,MAAO,MAAK,CACd,CAAC,CAED,KAAM,CAAAoB,MAAM,CAAGA,CAAA,GAAM,CACnBtB,OAAO,CAAC,IAAI,CAAC,CACbI,YAAY,CAACK,UAAU,CAAC,qBAAqB,CAAC,CAChD,CAAC,CAED,KAAM,CAAAc,KAAsB,CAAG,CAC7BxB,IAAI,CACJyB,eAAe,CAAE,CAAC,CAACzB,IAAI,CACvBW,KAAK,CACLY,MAAM,CACNrB,OACF,CAAC,CAED,mBACEX,IAAA,CAACC,WAAW,CAACkC,QAAQ,EAACF,KAAK,CAAEA,KAAM,CAAAzB,QAAA,CAChCA,QAAQ,CACW,CAAC,CAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}